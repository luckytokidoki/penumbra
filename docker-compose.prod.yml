version: "3.7"
# docker-compose oerrides for local development.
#
# this modifies the docker-compose configuration for locally testing and
# debugging the Penumbra daemon. these configurations may not be desirable when
# running in production, so the main `docker-compose.yml` defines a canonical
# configuration for prod deployments.
services:
  pd:
    build:
      dockerfile: Dockerfile
    secrets:
      - db_connection_string
    command:
      [
        "bash",
        "-c",
        "pd start --host 0.0.0.0 --database-uri $$(cat
          /run/secrets/db_connection_string)"
      ]

  # add prometheus and grafana
  #
  # in production, users will want to bring their own monitoring stack, rather
  # than running a separate prometheus and grafana instance on every node.
  prometheus:
    image: "prom/prometheus:latest"
    ports:
      - '9090:9090'
    volumes:
      - "./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro"
      - "prometheus_data:/prometheus"
    networks:
      # prometheus needs to be on the local network for scraping metrics from
      # tendermint and penumbra.
      - localnet
      - monitoring

  grafana:
    image: "grafana/grafana:latest"
    ports:
      - '3000'
    volumes:
      - "grafana_configs:/etc/grafana"
      - "grafana_dashboards:/var/lib/grafana/dashboards"
    networks:
      - monitoring
    depends_on:
      # don't start grafana until prometheus is up
      - prometheus

  # Caddy provides TLS termination for the Grafana web service
  caddy:
    image: caddy:2-alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/Caddyfile:/etc/caddy/Caddyfile
      - /root/caddy/data:/data
      - /root/caddy/config:/config
    networks:
      - monitoring

volumes:
  prometheus_data: {}
  grafana_configs: {}
  grafana_dashboards: {}

networks:
  # add a separate network for grafana and prometheus to talk to each other.
  monitoring: {}

secrets:
  db_connection_string:
    file: /root/secretz/db_connection_string
