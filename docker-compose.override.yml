version: "3.7"
# docker-compose oerrides for local development.
#
# this modifies the docker-compose configuration for locally testing and
# debugging the Penumbra daemon. these configurations may not be desirable when
# running in production, so the main `docker-compose.yml` defines a canonical
# configuration for prod deployments.
services:
  # for local development, configure the penumbra daemon with more logging.
  pd:
    environment:
      - RUST_LOG=${RUST_LOG:-info,pd=debug,penumbra=debug}
    build:
      # Use the dev Dockerfile which has better cacheing and doesn't use the release
      # target
      dockerfile: Dockerfile.dev
    command: pd start --host 0.0.0.0 --database-uri
      postgres://postgres:postgres@db/penumbra
    depends_on:
      - db
    links:
      - db:db

  # database - postgres - on prod we are using managed DB instances
  db:
    image: postgres:13.0
    container_name: db
    volumes:
      - "db_data:/var/lib/postgresql/data"
    environment:
      - POSTGRES_DB=penumbra
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    networks:
      localnet:
        ipv4_address: 192.167.10.12
    # expose database on a port so it is easy to play with
    ports:
      - "5432:5432"

  # add prometheus and grafana
  #
  # in production, users will want to bring their own monitoring stack, rather
  # than running a separate prometheus and grafana instance on every node.
  prometheus:
    image: "prom/prometheus:latest"
    ports:
      - '9090:9090'
    volumes:
      - "./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro"
      - "prometheus_data:/prometheus"
    networks:
      # prometheus needs to be on the local network for scraping metrics from
      # tendermint and penumbra.
      - localnet
      - monitoring

  grafana:
    image: "grafana/grafana:latest"
    ports:
      - '3000'
    volumes:
      # this grafana config is intended for local development and disables auth
      # etc. in production, users will generally want to configure a centralized
      # grafana instance...
      - "./config/grafana/provisioning:/etc/grafana/provisioning:ro"
      - "./config/grafana.ini:/etc/grafana/config.ini:ro"
      # mount the dashboards dir as read-write so we can add new dashboards
      # using the Grafana web UI.
      - "./config/grafana/dashboards:/var/lib/grafana/dashboards:rw"
    networks:
      - monitoring
    depends_on:
      # don't start grafana until prometheus is up
      - prometheus

volumes:
  prometheus_data: {}
  db_data: {}

networks:
  # add a separate network for grafana and prometheus to talk to each other.
  monitoring: {}

secrets:
  db_connection_string:
    # this isn't used in dev but needs to be set because it was defined in the parent
    file: Dockerfile
